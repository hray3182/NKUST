# -*- coding: utf-8 -*-
"""dapp_week3 homework

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RbUSoYfGGT8yQhpiw0-b2Ji4s_8W4BjZ
"""

!pip install numpy
!pip install pandas
!pip install yfinance
!pip install matplotlib

# Commented out IPython magic to ensure Python compatibility.
# install the motherfucker talib :)
!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
!tar -xzvf ta-lib-0.4.0-src.tar.gz
# %cd ta-lib
!./configure --prefix=/usr
!make
!make install
!pip install Ta-Lib
import talib

import numpy as np
import pandas as pd
import yfinance as yf #股價下載套件 Colab已有不用裝
import matplotlib.pyplot as plt #畫圖套件
from datetime import datetime

def drawStockSeries(df, xLabel):
  df[['close']].plot(figsize=(12,5))
  plt.title(xLabel, size=15)
  plt.legend(loc = "best", fontsize=12)
  plt.show()

target_stock = "2498.TW"  # 分析公司代號 e.g., '2330.TW'是台積電
start_date = datetime(2021, 1, 1)  # 設定資料開始日期
end_date = datetime(2021, 7, 19)  # 設定資料結束日期
stopLoss = 0.1  # 停損點，指-10%會強制賣出
df = yf.download(target_stock, start_date, end_date)  # 將資料放到Dataframe裡面
print(df.head())
df = df[["Open", "High", "Low", "Close", "Volume"]]  # 保留所需欄位
print(df.head())
# 更改欄位名稱，將第一個字母改為小寫
df.rename(
    columns={
        "Close": "close",
        "High": "high",
        "Low": "low",
        "Open": "open",
        "Volume": "volume",
    },
    inplace=True,
)
print(df.head())
# 畫出股價序列圖，使用之前寫過的函數
drawStockSeries(df, target_stock)  # 記得把上周的函數先定義好

# 計算 KD 指標
df['K'], df['D'] = talib.STOCH(
    df['high'].values.flatten(),
    df['low'].values.flatten(),
    df['close'].values.flatten(),
    fastk_period=9,
    slowk_period=3,
    slowd_period=3
)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), sharex=True)

# Top chart: Price trend
ax1.plot(df.index, df['close'].values.flatten(),
         label='Close Price', color='black', linewidth=1.5)
ax1.set_title('Stock Price Chart', fontsize=14, fontweight='bold')
ax1.set_ylabel('Price', fontsize=12)
ax1.legend(loc='best')
ax1.grid(True, alpha=0.3)

# Bottom chart: KD indicator
ax2.plot(df.index, df['K'], label='K Line', color='blue', linewidth=1.5)
ax2.plot(df.index, df['D'], label='D Line', color='orange', linewidth=1.5)

# Overbought/Oversold zones
ax2.axhline(y=80, color='red', linestyle='--', alpha=0.5)
ax2.axhline(y=20, color='green', linestyle='--', alpha=0.5)
ax2.axhline(y=50, color='gray', linestyle=':', alpha=0.3)

# Fill zones
ax2.fill_between(df.index, 80, 100, alpha=0.1, color='red')
ax2.fill_between(df.index, 0, 20, alpha=0.1, color='green')

ax2.set_title('KD Stochastic Indicator', fontsize=14, fontweight='bold')
ax2.set_xlabel('Date', fontsize=12)
ax2.set_ylabel('KD Value', fontsize=12)
ax2.legend(loc='best')
ax2.grid(True, alpha=0.3)
ax2.set_ylim(0, 100)

plt.tight_layout()
plt.show()

# 初始化
flag = 0
buyPrice = 0
trades = []
stopLoss = -0.1  # 把停損改成負數

for i in range(15, len(df)):
    current_price = df['close'].iloc[i].item()
    current_k = df['K'].iloc[i]
    current_d = df['D'].iloc[i]
    prev_k = df['K'].iloc[i-1]
    prev_d = df['D'].iloc[i-1]

    # 買入訊號
    if current_k > current_d and prev_k <= prev_d and flag == 0:
        flag = 1
        buyPrice = current_price
        buy_date = df.index[i]
        print(f"Buy Date: {buy_date.strftime('%Y-%m-%d')}, Buy Price: {buyPrice:.2f}")

    # 持有期間先檢查停損（放在賣出訊號之前）
    elif flag == 1 and (current_price - buyPrice) / buyPrice <= stopLoss:
        flag = 0
        sellPrice = current_price
        sell_date = df.index[i]
        profit = sellPrice - buyPrice
        profit_pct = (profit / buyPrice) * 100

        trades.append({
            'Buy Date': buy_date,
            'Buy Price': buyPrice,
            'Sell Date': sell_date,
            'Sell Price': sellPrice,
            'Profit': profit,
            'Profit %': profit_pct,
            'Exit Type': 'Stop Loss'
        })

        print(f"[STOP LOSS] Sell Date: {sell_date.strftime('%Y-%m-%d')}, Sell Price: {sellPrice:.2f}, P&L: {profit:.2f} ({profit_pct:.2f}%)")

    # 賣出訊號（KD 死亡交叉）
    elif current_k < current_d and prev_k >= prev_d and flag == 1:
        flag = 0
        sellPrice = current_price
        sell_date = df.index[i]
        profit = sellPrice - buyPrice
        profit_pct = (profit / buyPrice) * 100

        trades.append({
            'Buy Date': buy_date,
            'Buy Price': buyPrice,
            'Sell Date': sell_date,
            'Sell Price': sellPrice,
            'Profit': profit,
            'Profit %': profit_pct,
            'Exit Type': 'Signal'
        })

        print(f"Sell Date: {sell_date.strftime('%Y-%m-%d')}, Sell Price: {sellPrice:.2f}, P&L: {profit:.2f} ({profit_pct:.2f}%)")

# 顯示交易摘要
if trades:
    trades_df = pd.DataFrame(trades)
    print("\n=== Trading Summary ===")
    print(trades_df.to_string(index=False))
    print(f"\nTotal Trades: {len(trades)}")
    print(f"Total Profit: {trades_df['Profit'].sum():.2f}")
    print(f"Average Profit per Trade: {trades_df['Profit'].mean():.2f}")
    print(f"Win Rate: {(trades_df['Profit'] > 0).sum() / len(trades) * 100:.2f}%")
    print(f"\nExit by Signal: {(trades_df['Exit Type'] == 'Signal').sum()}")
    print(f"Exit by Stop Loss: {(trades_df['Exit Type'] == 'Stop Loss').sum()}")
else:
    print("No trades executed.")




# 回測結果
# Buy Date: 2021-01-25, Buy Price: 28.25
# Sell Date: 2021-02-05, Sell Price: 28.00, P&L: -0.25 (-0.88%)
# Buy Date: 2021-02-17, Buy Price: 28.55
# Sell Date: 2021-02-25, Sell Price: 29.15, P&L: 0.60 (2.10%)
# Buy Date: 2021-03-10, Buy Price: 28.50
# Sell Date: 2021-03-16, Sell Price: 28.80, P&L: 0.30 (1.05%)
# Buy Date: 2021-03-19, Buy Price: 29.10
# Sell Date: 2021-03-24, Sell Price: 29.05, P&L: -0.05 (-0.17%)
# Buy Date: 2021-03-29, Buy Price: 29.70
# Sell Date: 2021-04-08, Sell Price: 31.45, P&L: 1.75 (5.89%)
# Buy Date: 2021-04-12, Buy Price: 32.80
# Sell Date: 2021-04-20, Sell Price: 39.95, P&L: 7.15 (21.80%)
# Buy Date: 2021-04-23, Buy Price: 41.80
# Sell Date: 2021-04-28, Sell Price: 43.10, P&L: 1.30 (3.11%)
# Buy Date: 2021-05-18, Buy Price: 34.25
# Sell Date: 2021-06-01, Sell Price: 37.25, P&L: 3.00 (8.76%)
# Buy Date: 2021-06-09, Buy Price: 37.20
# Sell Date: 2021-06-16, Sell Price: 40.10, P&L: 2.90 (7.80%)
# Buy Date: 2021-07-05, Buy Price: 39.75
# Sell Date: 2021-07-07, Sell Price: 38.15, P&L: -1.60 (-4.03%)
# Buy Date: 2021-07-12, Buy Price: 37.80
#
# === Trading Summary ===
#   Buy Date  Buy Price  Sell Date  Sell Price    Profit  Profit % Exit Type
# 2021-01-25  28.250000 2021-02-05   28.000000 -0.250000 -0.884956    Signal
# 2021-02-17  28.549999 2021-02-25   29.150000  0.600000  2.101578    Signal
# 2021-03-10  28.500000 2021-03-16   28.799999  0.299999  1.052629    Signal
# 2021-03-19  29.100000 2021-03-24   29.049999 -0.050001 -0.171825    Signal
# 2021-03-29  29.700001 2021-04-08   31.450001  1.750000  5.892256    Signal
# 2021-04-12  32.799999 2021-04-20   39.950001  7.150002 21.798786    Signal
# 2021-04-23  41.799999 2021-04-28   43.099998  1.299999  3.110046    Signal
# 2021-05-18  34.250000 2021-06-01   37.250000  3.000000  8.759124    Signal
# 2021-06-09  37.200001 2021-06-16   40.099998  2.899998  7.795693    Signal
# 2021-07-05  39.750000 2021-07-07   38.150002 -1.599998 -4.025153    Signal
#
# Total Trades: 10
# Total Profit: 15.10
# Average Profit per Trade: 1.51
# Win Rate: 70.00%
#
# Exit by Signal: 10
# Exit by Stop Loss: 0
